rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	function hasRole(role) {
    	return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.roles.hasAny(role)
  	}
    
    function isSignedIn() {
      return request.auth.uid != null;
    }
  
  	function isOwner(resourceId){
    	return isSignedIn() && request.auth.uid == resourceId
    }
    
    // Make sure the uid of the requesting user matches name of the user
    // document. The wildcard expression {userId} makes the userId variable
    // available in rules.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || hasRole(['admin']);
      allow create: if isSignedIn();
    }
    
    match /users/{userId}/timesheets/{timesheetId} {
      allow read, write: if isOwner(userId);
    }
    
    match /projects/{projectId} {
      allow create, read, update: if hasRole(['admin']);
    }
    
    match /roles/{userId} {
      allow read, write: if isOwner(userId) || hasRole(['admin']);
    }
  }
}
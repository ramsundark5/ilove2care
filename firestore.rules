rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	function hasRole(role) {
    	return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.roles.hasAny(role)
  	}
    
    function isSignedIn() {
      return request.auth.uid != null;
    }
  
  	function isOwner(resourceId){
    	return isSignedIn() && request.auth.uid == resourceId
    }
    
    function isProjectAdmin(projectRecord) {
    	return isSignedIn() && projectRecord.admins.hasAny([request.auth.token.email])
  	}
    
    function isProjectMember(projectRecord) {
    	return isSignedIn() && projectRecord.users.hasAny([request.auth.token.email])
  	}
    
    function isCreditReceiver(creditRecord) {
    	return isSignedIn() && creditRecord.users.hasAny([request.auth.token.email])
  	}
    
    // user collection permissions
    match /users/{userId} {
      allow read, update: if isOwner(userId) || hasRole(['admin']);
      allow create: if isSignedIn();
    }
    
    // timesheet collection permissions
    match /users/{userId}/timesheets/{timesheetId} {
      allow read, write: if isOwner(userId);
    }
    
    // roles collection permissions
    match /roles/{userId} {
      allow read, write: if isOwner(userId) || hasRole(['admin']);
    }
    
    // project collection permissions
    match /projects/{projectId} {
      allow create, update: if hasRole(['admin']);
      allow read: if isProjectMember(resource.data) || hasRole(['admin']);
    }
    
    // credits collection permissions
    match /{path=**}/credits/{creditId} {
      allow create, update, delete: if isProjectAdmin(resource.data) || hasRole(['admin']);
      allow read: if isCreditReceiver(resource.data) || hasRole(['admin']);
    }
  }
}